class Solution {
    public int[] runningSum(int[] nums) {
        int sum=0;
        for(int i=0;i<nums.length;i++){
         sum+=nums[i];
         nums[i]=sum;
        }
        return nums;
    }
}


class Solution {
    public int maximumWealth(int[][] accounts) {
        int max=0;
        for(int i=0;i<accounts.length;i++){
            int sum=0;
            for(int j=0;j<accounts[i].length;j++){
                sum+=accounts[i][j];
            }
            if(sum>max){
                max=sum;
            }
        }
        return max;
    }
}


class Solution {
    public List<String> fizzBuzz(int n) {
        ArrayList<String> answer=new ArrayList<>();
        for(int i=1;i<=n;i++){
            if(i%3==0&&i%5==0){
                answer.add("FizzBuzz");
            }else if(i%3==0){
                answer.add("Fizz");
            }else if(i%5==0){
                answer.add("Buzz");
            }else{
                answer.add(String.valueOf(i));
            }
        }
        return answer;
    }
}


class Solution {
    public int numRescueBoats(int[] people, int limit) {
        Arrays.sort(people);
        int start=0,end=people.length-1,count=0;

        while(start<=end){
            if(people[start]+people[end]<=limit){
                start++;
            }
                end--;
                count++;
        }
        return count;
    }
}


class Solution {
    public int maxArea(int[] height) {
         int left = 0;
         int right = height.length - 1;
         int max_area = 0;

    while (left < right) {
        int width = right - left;
        int h = (height[left] < height[right]) ? height[left] : height[right];
        int current_area = width * h;
        
        if (current_area > max_area) {
            max_area = current_area;
        }
        
        if (height[left] < height[right]) {
            left++;
        } else {
            right--;
        }
    }
    return max_area;
    }
}
