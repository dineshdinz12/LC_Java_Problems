class Solution {
    public boolean validPath(int n, int[][] edges, int source, int destination) {
        List<List<Integer>> graph = new ArrayList<>();
        for(int i = 0; i < n; i++) graph.add(new ArrayList<>());
        for(int[] edge : edges) {
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }

        boolean[] visited = new boolean[n];
        return dfs(graph, source, destination, visited);
    }

    private boolean dfs(List<List<Integer>> graph, int current, int destination, boolean[] visited) {
        if(current == destination) return true;
        visited[current] = true;

        for(int neighbor : graph.get(current)) {
            if(!visited[neighbor]) {
                if(dfs(graph, neighbor, destination, visited)) return true;
            }
        }

        return false;
    }
}



class Solution {
    public int findJudge(int n, int[][] trust) {
        int[] trusty=new int[n+1];
        for(int t[]:trust){
           trusty[t[0]]--;
           trusty[t[1]]++;
        }
        for(int i=1;i<=n;i++){
            if(trusty[i]==n-1){
               return i;
            }
        }
        return -1;
    }
}
