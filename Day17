class Solution {
    public int removeDuplicates(int[] nums) {
        int numsSize=nums.length;
        if (numsSize == 0) {
        return 0;
    }

    int k = 1;

    for (int i = 1; i < numsSize; i++) {
        if (nums[i] != nums[k - 1]) { 
            nums[k] = nums[i];
            k++;
        }
    }

    return k;
    }
}


class Solution {
    public int removeDuplicates(int[] nums) {
        int k=2;
       for (int i = 2; i < nums.length; i++) {
        if (nums[i] != nums[k - 2]) { 
            nums[k] = nums[i];
            k++;
        }
        }
        return k;
    }
}

class Solution {
    public void reverse(int [] nums,int start,int end){
        while(start<end){
            int temp=nums[start];
            nums[start]=nums[end];
            nums[end]=temp;
            start++;
            end--;
        }
    }
    public void rotate(int[] nums, int k) {
        int n=nums.length;
        k= k%n;
        reverse(nums,0,n-1);
        reverse(nums,0,k-1);
        reverse(nums,k,n-1);

    }
}

class Solution {
    public void reverse(int[] row) {
        int start = 0, end = row.length - 1;
        while (start < end) {
            int temp = row[start];
            row[start] = row[end];
            row[end] = temp;
            start++;
            end--;
        }
    }
    public void rotate(int[][] matrix) {
        int size=matrix.length-1;
        for(int i=0;i<=size;i++){
        for(int j=i;j<=size;j++){
            int temp=matrix[i][j];
            matrix[i][j]=matrix[j][i];
            matrix[j][i]=temp;
        }}
        for(int k=0;k<=size;k++){
        reverse(matrix[k]);
        }   
    }
}
