class MyLinkedList {
    Node start;
    Node last;

    class Node {
        int data;
        Node next;

        Node(int d) {
            data = d;
            next = null;
        }
    }

    public MyLinkedList() {
        start = null;
        last = null;
    }

    public int get(int index) {
        if (index < 0) return -1;
        Node ptr = start;
        int count = 0;
        while (ptr != null) {
            if (count == index) return ptr.data;
            ptr = ptr.next;
            count++;
        }
        return -1;
    }

    public void addAtHead(int val) {
        Node newNode = new Node(val);
        if (start == null) {
            start = last = newNode;
        } else {
            newNode.next = start;
            start = newNode;
        }
    }

    public void addAtTail(int val) {
        Node newNode = new Node(val);
        if (start == null) {
            start = last = newNode;
        } else {
            last.next = newNode;
            last = newNode;
        }
    }

    public void addAtIndex(int index, int val) {
        if (index < 0 || index > size()) return;
        if (index == 0) {
            addAtHead(val);
            return;
        }
        if (index == size()) {
            addAtTail(val);
            return;
        }
        Node newNode = new Node(val);
        Node ptr = start;
        for (int i = 1; i < index; i++) {
            ptr = ptr.next;
        }
        newNode.next = ptr.next;
        ptr.next = newNode;
    }

    public void deleteAtIndex(int index) {
        if (index < 0 || index >= size()) return;
        if (index == 0) {
            start = start.next;
            if (start == null) last = null;
            return;
        }
        Node ptr = start;
        for (int i = 1; i < index; i++) {
            ptr = ptr.next;
        }
        ptr.next = ptr.next.next;
        if (ptr.next == null) last = ptr;
    }

    public int size() {
        int count = 0;
        Node ptr = start;
        while (ptr != null) {
            ptr = ptr.next;
            count++;
        }
        return count;
    }

    public void display() {
        Node ptr = start;
        while (ptr != null) {
            System.out.print(ptr.data + " ");
            ptr = ptr.next;
        }
        System.out.println();
    }
}


class LRUCache {

    class Node {
        int key, value;
        Node next, prev;
        Node(int k, int v) {
            key = k;
            value = v;
        }
    }

    Node head, tail;
    HashMap<Integer, Node> map = new HashMap<>();
    int capacity;

    public LRUCache(int capacity) {
        this.capacity = capacity;
        head = new Node(-1, -1);
        tail = new Node(-1, -1);
        head.next = tail;
        tail.prev = head;
    }

    public int get(int key) {
        if (!map.containsKey(key)) return -1;
        Node node = map.get(key);
        delete(node);
        add(node);
        return node.value;
    }

    public void put(int key, int value) {
        if (map.containsKey(key)) {
            Node rem = map.get(key);
            rem.value = value;
            delete(rem);
            add(rem);
        } else {
            if (map.size() == capacity) {
                Node lru = tail.prev;
                delete(lru);
                map.remove(lru.key);
            }
            Node newNode = new Node(key, value);
            add(newNode);
            map.put(key, newNode);
        }
    }

    public void add(Node n) {
        n.prev = head;
        n.next = head.next;
        head.next.prev = n;
        head.next = n;
    }

    public void delete(Node n) {
        n.prev.next = n.next;
        n.next.prev = n.prev;
    }
}
