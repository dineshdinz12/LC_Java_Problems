class Solution {
    public double findMaxAverage(int[] nums, int k) {
      int sum=0;
      for(int i=0;i<k;i++){
        sum+=nums[i];
      }
      int maxi=sum;
      for(int i=k;i<nums.length;i++){
        sum=sum-nums[i-k]+nums[i];
        maxi=Math.max(maxi,sum);
      }

        return (double) maxi/k;
    }
}


class Solution {
    public int bagOfTokensScore(int[] tokens, int power) {
        int score=0,i=0,j=tokens.length-1,maxi=0;
        Arrays.sort(tokens);
        while(i<=j){
           if(tokens[i]<=power){
            power=power-tokens[i];
            score=score+1;
            i++;
            maxi=Math.max(maxi,score);
           }
           else if(score>=1){
            power=power+tokens[j];
            score=score-1;
            j--;
           }
           else{
            break;
           }

        }
        return maxi;
    }
}


class Solution {
    public int[] productExceptSelf(int[] nums) {
        int product=1,count=0;
        int n = nums.length;
        int[] result = new int[n];
        for(int i=0;i<nums.length;i++){
            if(nums[i]==0){
                count++;
            }else{
            product=product*nums[i];}
         
        }
        for(int j=0;j<nums.length;j++){
            if(count>1){
             result[j]=0;}
            else if(count==1){
             result[j]=(nums[j]==0)?product:0;
            }
            else{
             result[j]=product/nums[j];
            }
        }
        return result;
    }
}

class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int len = flowerbed.length;

        for (int i = 0; i < len; i++) {
            if (flowerbed[i] == 0) {
                boolean emptyPrev = (i == 0 || flowerbed[i - 1] == 0);
                boolean emptyNext = (i == len - 1 || flowerbed[i + 1] == 0);

                if (emptyPrev && emptyNext) {
                    flowerbed[i] = 1; 
                    n--;
                    
                    if (n == 0) return true;
                }
            }
        }
        return n <= 0;
    }
}
