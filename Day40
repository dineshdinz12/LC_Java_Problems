class MyQueue {
    Stack<Integer> stack;
    Stack<Integer> stak;
    public MyQueue() {
        stack=new Stack<>();
        stak=new Stack<>();
    }
    
    public void push(int x) {
        stack.push(x);
    }
    
    public void shift() {
        if(stak.isEmpty()){
            while(!stack.isEmpty()){
                stak.push(stack.pop());
            }
        }
    }
    public int pop(){
       if (empty()) {
            return -1;
        }
        shift();
        return stak.pop();
    }
    public int peek() {
        if (empty()) {
            return -1;
        }
        shift();
        return stak.peek();
    }
    
    public boolean empty() {
        return stack.isEmpty() && stak.isEmpty();
    }
}

class MyStack {
    Queue<Integer> queue;

    public MyStack() {
        queue = new LinkedList<>();
    }

    public void push(int x) {
        queue.add(x);
        int size = queue.size();
        for (int i = 0; i < size - 1; i++) {
            queue.add(queue.remove());
        }
    }

    public int pop() {
        if (queue.isEmpty()) return -1;
        return queue.remove();
    }

    public int top() {
        if (queue.isEmpty()) return -1;
        return queue.peek();
    }

    public boolean empty() {
        return queue.isEmpty();
    }
}
