class Solution {
    public boolean isValid(String s) {
      Stack<Character> stack=new Stack<>();
      for(char ch:s.toCharArray()){
        if(ch=='{'||ch=='['||ch=='('){
           stack.push(ch);
        }
        else{
            if(stack.isEmpty()) return false;
            else{
                char top=stack.pop();
                if(ch=='}'&&top!='{' || ch==']'&&top!='[' || ch==')'&&top!='('){
                    return false;
                }
            }
        }
      }
      return stack.isEmpty();  
    }
}

class MinStack {
    Node top;

    class Node {
        int data;
        int minSoFar;
        Node next;

        Node(int data, int minSoFar, Node next) {
            this.data = data;
            this.minSoFar = minSoFar;
            this.next = next;
        }
    }

    public MinStack() {
        top = null;
    }

    public void push(int val) {
        if (top == null) {
            top = new Node(val, val, null);
        } else {
            int newMin = Math.min(val, top.minSoFar);
            top = new Node(val, newMin, top);
        }
    }

    public void pop() {
        if (top != null) {
            top = top.next;
        }
    }

    public int top() {
        if (top != null) return top.data;
        throw new RuntimeException("Stack is empty");
    }

    public int getMin() {
        if (top != null) return top.minSoFar;
        throw new RuntimeException("Stack is empty");
    }
}
