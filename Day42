class Solution {
    public ListNode oddEvenList(ListNode head) {
       if (head == null || head.next == null) return head;
       ListNode odd=head;
       ListNode even=head.next;
       ListNode evenhead=even;
       while(even!=null && even.next!=null){
        odd.next=even.next;
        odd=odd.next;

        even.next=odd.next;
        even=even.next;
       } 
       odd.next=evenhead;
       return head;  
    }
}

class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if (head == null || head.next == null || k == 0) return head;
        ListNode start=head;
        ListNode end=head;
        int len=1;
        while(end.next!=null){
         end=end.next;
         len++;
        }
        
        end.next=start;
        int steps=len-(k%len);
        ListNode newTail = start;
        for(int i=1;i<steps;i++){
             newTail=newTail.next;
        }
        ListNode newHead=newTail.next;
        newTail.next=null;

        return newHead;
    }
}
