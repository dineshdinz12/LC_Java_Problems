public class Solution {
    public String countAndSay(int n) {
        if (n == 1) return "1";

        String result = "1";

        for (int i = 2; i <= n; i++) {
            StringBuilder temp = new StringBuilder();
            int count = 1;
            char prev = result.charAt(0);

            for (int j = 1; j < result.length(); j++) {
                char curr = result.charAt(j);
                if (curr == prev) {
                    count++;
                } else {
                    temp.append(count).append(prev);
                    count = 1;
                    prev = curr;
                }
            }

            temp.append(count).append(prev);
            result = temp.toString();
        }

        return result;
    }
}


class Solution {
    public List<Integer> preorder(Node root) {
        List<Integer> a=new ArrayList<>();
        if (root == null) return a;
        a.add(root.val);
        for(Node c : root.children)
        a.addAll(preorder(c));
        return a;
    }
}

class Solution {
    void dfs(Node root, List<Integer> ans){
        if(root==null) 
            return;

        for(int i=0;i<root.children.size();i++)
        {
            dfs(root.children.get(i), ans);
        }
        ans.add(root.val);
    }
    public List<Integer> postorder(Node root) {
        List<Integer> ans = new ArrayList<Integer>();
        dfs(root, ans);
        return ans;
    }
}

class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> result = new ArrayList<>();
        if (root == null) return result;

        Queue<Node> q = new LinkedList<>();
        q.add(root);

        while (!q.isEmpty()) {
            int size = q.size();
            List<Integer> currentLevel = new ArrayList<>();

            for (int i = 0; i < size; i++) {
                Node cur = q.poll();
                currentLevel.add(cur.val); 
                q.addAll(cur.children);   
            }

            result.add(currentLevel);
        }

        return result;
    }
}
