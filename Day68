class Solution {
    public double soupServings(int n) {
        if (n > 5000) return 1.0;
        int units = (n + 24) / 25;
        double[][] memo = new double[units + 1][units + 1];
        for (int i = 0; i <= units; i++) for (int j = 0; j <= units; j++) memo[i][j] = -1.0;
        return dfs(units, units, memo);
    }

    private double dfs(int a, int b, double[][] memo) {
        if (a <= 0 && b <= 0) return 0.5;
        if (a <= 0) return 1.0;
        if (b <= 0) return 0.0;
        if (memo[a][b] >= 0) return memo[a][b];
        double prob = 0.25 * (
            dfs(Math.max(0, a - 4), b, memo) +
            dfs(Math.max(0, a - 3), Math.max(0, b - 1), memo) +
            dfs(Math.max(0, a - 2), Math.max(0, b - 2), memo) +
            dfs(Math.max(0, a - 1), Math.max(0, b - 3), memo)
        );
        memo[a][b] = prob;
        return prob;
    }
}
